# ------------------------------------------------------------------------
# OWASP ModSecurity Core Rule Set ver.4.0.0-rc1
# Copyright (c) 2006-2020 Trustwave and contributors. All rights reserved.
# Copyright (c) 2021-2022 Core Rule Set project. All rights reserved.
#
# The OWASP ModSecurity Core Rule Set is distributed under
# Apache Software License (ASL) version 2
# Please see the enclosed LICENSE file for full details.
# ------------------------------------------------------------------------

#
# The purpose of this file is to hold LOCAL exceptions for your site.  The
# types of rules that would go into this file are one where you want to
# short-circuit inspection and allow certain transactions to pass through
# inspection or if you want to alter rules that are applied.
#
# This file is named REQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf.example for a
# very specific reason. Files affixed with the .example extension are designed
# to contain user created/modified data. The '.example'. extension should be
# renamed to end in .conf. The advantage of this is that when OWASP CRS is
# updated, the updates will not overwrite a user generated configuration file.
#
# As a result of this design paradigm users are encouraged NOT to directly
# modify rules. Instead they should use this
# REQUEST-900-EXCLUSION-RULES-BEFORE-CRS and the
# RESPONSE-999-EXCLUSION-RULES-AFTER-CRS file to modify OWASP rules using
# methods similar to the examples specified below.
#
# REQUEST-900-EXCLUSION-RULES-BEFORE-CRS and
# RESPONSE-999-EXCLUSION-RULES-AFTER-CRS serve different purposes. ModSecurity
# effectively maintains two different context: startup, and per transaction.
# As a rule, directives are processed within the startup context. While they
# can affect the per transaction context they generally remain fixed during the
# execution of ModSecurity.
#
# As a result if one wanted to disable a rule at bootup the SecRuleRemoveById
# directive or one of its siblings would have to be placed AFTER the rule is
# listed, otherwise it will not have knowledge of the rules existence (since
# these rules are read in at the same time). This means that when using
# directives that effect SecRules, these exceptions should be placed AFTER all
# the existing rules. This is why RESPONSE-999-EXCLUSION-RULES-AFTER-CRS is
# designed such that it loads LAST.
#
# Conversely, ModSecurity supports several actions that can change the state of
# the underlying configuration during the per transaction context, this is when
# rules are being processed. Generally, these are accomplished by using the
# 'ctl' action. As these are part of a rule, they will be evaluated in the
# order rules are applied (by physical location, considering phases). As a
# result of this ordering a 'ctl' action should be placed with consideration to
# when it will be executed. This is particularly relevant for the 'ctl' options
# that involve modifying ID's (such as ruleRemoveById). In these cases it is
# important that such rules are placed BEFORE the rule ID they will affect.
# Unlike the setup context, by the time we process rules in the per-transaction
# context, we are already aware of all the rule ID's. It is by this logic that
# we include rules such as this BEFORE all the remaining rules.  As a result
# REQUEST-900-EXCLUSION-RULES-BEFORE-CRS is designed to load FIRST.
#
# As a general rule:
# ctl:ruleEngine            -> place in REQUEST-900-EXCLUSION-RULES-BEFORE-CRS
# ctl:ruleRemoveById        -> place in REQUEST-900-EXCLUSION-RULES-BEFORE-CRS
# ctl:ruleRemoveByMsg       -> place in REQUEST-900-EXCLUSION-RULES-BEFORE-CRS
# ctl:ruleRemoveByTag       -> place in REQUEST-900-EXCLUSION-RULES-BEFORE-CRS
# ctl:ruleRemoveTargetById  -> place in REQUEST-900-EXCLUSION-RULES-BEFORE-CRS
# ctl:ruleRemoveTargetByMsg -> place in REQUEST-900-EXCLUSION-RULES-BEFORE-CRS
# ctl:ruleRemoveTargetByTag -> place in REQUEST-900-EXCLUSION-RULES-BEFORE-CRS
#
# SecRuleRemoveById         -> place in RESPONSE-999-EXCLUSION-RULES-AFTER-CRS
# SecRuleRemoveByMsg        -> place in RESPONSE-999-EXCLUSION-RULES-AFTER-CRS
# SecRuleRemoveByTag        -> place in RESPONSE-999-EXCLUSION-RULES-AFTER-CRS
# SecRuleUpdateActionById   -> place in RESPONSE-999-EXCLUSION-RULES-AFTER-CRS
# SecRuleUpdateTargetById   -> place in RESPONSE-999-EXCLUSION-RULES-AFTER-CRS
# SecRuleUpdateTargetByMsg  -> place in RESPONSE-999-EXCLUSION-RULES-AFTER-CRS
# SecRuleUpdateTargetByTag  -> place in RESPONSE-999-EXCLUSION-RULES-AFTER-CRS
#
#
# What follows are a group of examples that show you how to perform rule
# exclusions.
#
#
# Example Exclusion Rule: Disable inspection for an authorized client
#
# This ruleset allows you to control how ModSecurity will handle traffic
# originating from Authorized Vulnerability Scanning (AVS) sources.  See
# related blog post -
# https://www.trustwave.com/en-us/resources/blogs/spiderlabs-blog/updated-advanced-topic-of-the-week-handling-authorized-scanning-traffic/
#
# Allow List ASV network block (no blocking or logging of AVS traffic) Update
# IP network block as appropriate for your AVS traffic
#
# ModSec Rule Exclusion: Disable Rule Engine for known ASV IP
# SecRule REMOTE_ADDR "@ipMatch 192.168.1.100" \
#     "id:1000,\
#     phase:1,\
#     pass,\
#     nolog,\
#     ctl:ruleEngine=Off"
#
#
# Example Exclusion Rule: Removing a specific ARGS parameter from inspection
#                         for an individual rule
#
# This rule shows how to conditionally exclude the "password"
# parameter for rule 942100 when the REQUEST_URI is /index.php
# ModSecurity Rule Exclusion: 942100 SQL Injection Detected via libinjection
#
# SecRule REQUEST_URI "@beginsWith /index.php" \
#     "id:1001,\
#     phase:1,\
#     pass,\
#     nolog,\
#     ctl:ruleRemoveTargetById=942100;ARGS:password"
#
#
# Example Exclusion Rule: Removing a specific ARGS parameter from inspection
#                         for only certain attacks
#
# Attack rules within the CRS are tagged, with tags such as 'attack-lfi',
# 'attack-sqli', 'attack-xss', 'attack-injection-php', et cetera.
#
# ModSecurity Rule Exclusion: Disable inspection of ARGS:pwd
#                             for all rules tagged attack-sqli
# SecRule REQUEST_FILENAME "@endsWith /wp-login.php" \
#     "id:1002,\
#     phase:2,\
#     pass,\
#     nolog,\
#     ctl:ruleRemoveTargetByTag=attack-sqli;ARGS:pwd"
#

# Example Exclusion Rule: Removing a specific ARGS parameter from inspection
#                         for all CRS rules
#
# This rule illustrates that we can use tagging very effectively to allow list a
# common false positive across an entire ModSecurity instance. This can be done
# because every rule in OWASP_CRS is tagged with OWASP_CRS. This will NOT
# affect custom rules.
#
# ModSecurity Rule Exclusion: Disable inspection of ARGS:pwd
#                             for all CRS rules
# SecRule REQUEST_FILENAME "@endsWith /wp-login.php" \
#     "id:1003,\
#     phase:2,\
#     pass,\
#     nolog,\
#     ctl:ruleRemoveTargetByTag=OWASP_CRS;ARGS:pwd"

#
# Example Exclusion Rule: Removing a range of rules
#
# This rule illustrates that we can remove a rule range via a ctl action.
# This uses the fact, that rules are grouped by topic in rule files covering
# a certain id range.
#
# ModSecurity Rule Exclusion: Disable all SQLi and XSS rules
# SecRule REQUEST_FILENAME "@beginsWith /admin" \
#     "id:1004,\
#     phase:2,\
#     pass,\
#     nolog,\
#     ctl:ruleRemoveById=941000-942999"
#
#
# The application-specific rule exclusion plugins
# (see: https://github.com/coreruleset/plugin-registry)
# provide additional examples which can be useful then tuning a service.


#
# Example Rule: Allow monitoring tools and scripts
#
# Uncomment this rule to allow all requests from trusted IPs and User-Agent.
# This can be useful for monitoring tools like Monit, Nagios, or other agents.
# For example, if you're using AWS Load Balancer, you may need to trust all
# requests from "10.0.0.0/8" subnet that come with the user-agent
# "ELB-HealthChecker/2.0". By doing this, all requests that match these
# conditions will not be matched against the following rules:
#
# - id: 911100 (allowed methods)
# - id: 913100 (scan detection)
# - id: 920280 (missing/empty host header)
# - id: 920350 (IP address in host header)
# - tag: attack-disclosure (all RESPONSE-*-DATA-LEAKAGES rules)
#
# SecRule REMOTE_ADDR "@ipMatch 10.0.0.0/8" \
#    "id:1005,\
#    phase:1,\
#    pass,\
#    nolog,\
#    chain"
#    SecRule REQUEST_METHOD "@pm GET HEAD" "chain"
#       SecRule REQUEST_HEADERS:User-Agent "@pm ELB-HealthChecker" \
#           "ctl:ruleRemoveById=911100,\
#           ctl:ruleRemoveById=913100,\
#           ctl:ruleRemoveById=920280,\
#           ctl:ruleRemoveById=920350,\
#           ctl:ruleRemoveByTag=attack-disclosure"
SecRuleRemoveById 200002
#SecRule REQUEST_URI "^/.*\..*$" "id:999999,phase:1,deny,status:403,log,msg:'Blocking access to potentially malicious URI.'"
#SecRule HTTP_User-Agent "Burp|DirBuster|OpenVAS|Metasploit|Wfuzz|Arachni|ZAP" \
#    "id:'999996',phase:request,deny,status:403,log,msg:'Scanner detected and blocked.'"
#SecRule HTTP_User-Agent "(?i)(acunetix|nessus|sqlmap|nikto|w3af|zaproxy|burp|dirbuster|openvas|metasploit|wfuzz|arachni|zap)" \
#"id:'999996',phase:1,deny,status:403,log,msg:'Detected and blocked scanner traffic.'"
# Block specific URIs
SecRule REQUEST_HEADERS:User-Agent "ZAP|OWASP" \
    "id:999975,phase:1,deny,log,msg:'Blocked OWASP ZAP User-Agent'"
SecRule REQUEST_URI "@streq /admin.aspx" \
    "id:999976,phase:1,deny,status:403,msg:'Access to /admin.aspx is blocked by ModSecurity'"
SecRule REQUEST_URI "@streq /img/CHANGELOG" \
    "id:999977,phase:1,deny,status:403,msg:'Access to /img/CHANGELOG is blocked by ModSecurity'"
SecRule REQUEST_URI "@streq /ChangeLog" \
    "id:999978,phase:1,deny,status:403,msg:'Access to /ChangeLog is blocked by ModSecurity'"
SecRule REQUEST_URI "@streq /CHANGELOG" \
    "id:999979,phase:1,deny,status:403,msg:'Access to /CHANGELOG is blocked by ModSecurity'"
SecRule REQUEST_URI "@streq /INSTALL" \
    "id:999980,phase:1,deny,status:403,msg:'Access to /INSTALL is blocked by ModSecurity'"
SecRule REQUEST_URI "@streq /img/BUGS" \
    "id:999981,phase:1,deny,status:403,msg:'Access to /img/BUGS is blocked by ModSecurity'"
SecRule REQUEST_URI "@streq /.git/config" \
    "id:999982,phase:1,deny,status:403,msg:'Access to /.git/config is blocked by ModSecurity'"
SecRule REQUEST_URI "@streq /BUGS" \
    "id:999983,phase:1,deny,status:403,msg:'Access to /BUGS is blocked by ModSecurity'"
# Block access to any file in /img/ directory
SecRule REQUEST_URI "^/img/.*" \
    "id:999984,phase:1,deny,status:403,msg:'Access to /img/ is blocked by ModSecurity'"
# Block access to .svn directories
SecRule REQUEST_URI "@rx /\.svn/" \
    "id:999985,phase:1,deny,status:403,msg:'Access to .svn directories is blocked by ModSecurity'"
# Block access to /CHANGELOG URI
SecRule REQUEST_URI "^/CHANGELOG$" "id:999986,phase:1,deny,status:403,msg:'Access to /CHANGELOG is blocked by ModSecurity'"
# Block access to /img/ URI
SecRule REQUEST_URI "^/img/$" "id:999987,phase:1,deny,status:403,msg:'Access to /img/ is blocked by ModSecurity'"
# Block access to any file in /img/ directory
SecRule REQUEST_URI "^/img/.*" "id:999988,phase:1,deny,status:403,msg:'Access to /img/ is blocked by ModSecurity'"
# Block access to /admin.aspx
SecRule REQUEST_URI "@streq /admin.aspx" \
    "id:999989,phase:1,deny,status:403,msg:'Access to /admin.aspx is blocked by ModSecurity'"
# Block access to /img/CHANGELOG
SecRule REQUEST_URI "@streq /img/CHANGELOG" \
    "id:999990,phase:1,deny,status:403,msg:'Access to /img/CHANGELOG is blocked by ModSecurity'"
# Block access to /test.aspx
SecRule REQUEST_URI "@streq /test.aspx" \
    "id:999991,phase:1,deny,status:403,msg:'Access to /test.aspx is blocked by ModSecurity'"
# Block access to any .aspx file in the /img/ directory
SecRule REQUEST_URI "@rx ^/img/.*\.aspx$" \
    "id:999992,phase:1,deny,status:403,msg:'Access to .aspx files in /img/ directory is blocked by ModSecurity'"
# Block access to /img/admin.aspx
SecRule REQUEST_URI "@streq /img/admin.aspx" \
    "id:999993,phase:1,deny,status:403,msg:'Access to this URI is blocked by ModSecurity'"
SecRule REQUEST_HEADERS:User-Agent "(?i)(01h4x\.com|360Spider|404checker|80legs|ADmantX|AIBOT|ALittle\\ Client|ASPSeek|Abonti|Aboundex|Acunetix|AhrefsBot|AiHitBot|Alexibot|AllSubmitter|AlphaBot|Anarchy|Ankit|Anthill|Apexoo|Aspiegel|Atomseobot|AwarioRssBot|BBBike|BDCbot|BLEXBot|BackDoorBot|Backlink-Ceck|Bandit|Barkrowler|Battleztar\\ Bazinga|BetaBot|Bigfoot|Bitacle|BlackWidow|BlowFish|Bolt|BotALot|Brandwatch|Buck|BuiltBotTough|Bullseye|BunnySlippers|BuzzSumo|Bytespider|CATExplorador|CCBot|CODE87|CSHttp|Calculon|CazoodleBot|Cegbfeieh|CensysInspect|ChatGPT-User|CheTeam|CheeseBot|CherryPicker|ChinaClaw|Chlooe|Citoid|Claritybot|Cliqzbot|Cloud\\ mapping|Cocolyzebot|Cogentbot|Collector|Copier|CopyRightCheck|Copyscape|Cosmos|Craftbot|CrazyWebCrawler|Crescent|CrunchBot|Curious|Custo|CyotekWebCopy|DBLBot|DIIbot|DSearch|DTS\\ Agent|DataCha0s|DatabaseDriverMysqli|Demon|Deusu|Devil|Digincore|DigitalPebble|Dirbuster|Disco|Discobot|Discoverybot|Dispatch|DittoSpyder|DnBCrawler-Analytics|DnyzBot|DomCopBot|DomainAppender|DomainCrawler|DomainSigmaCrawler|DomainStatsBot|Domains\\ Project|Dotbot|Download\\ Wonder|Dragonfly|Drip|ECCP/1\.0|EMail\\ Siphon|EMail\\ Wolf|EasyDL|Ebingbong|Ecxi|EirGrabber|EroCrawler|Evil|Exabot|Express\\ WebPictures|ExtLinksBot|Extractor|ExtractorPro|Extreme\\ Picture\\ Finder|EyeNetIE|Ezooms|FDM|FHscan|FacebookBot|FemtosearchBot|Fimap|Firefox/7\.0|FlashGet|Flunky|Foobot|Freeuploader|FrontPage|Fuzz|FyberSpider|Fyrebot|G-i-g-a-b-o-t|GPTBot|GT::WWW|GalaxyBot|Genieo|GermCrawler|GetRight|GetWeb|Getintent|Gigabot|Go!Zilla|Go-Ahead-Got-It|GoZilla|Google-Extended|Gotit|GrabNet|Grabber|Grafula|GrapeFX|GrapeshotCrawler|GridBot|HEADMasterSEO|HMView|HTMLparser|HTTP::Lite|HTTrack|Haansoft|HaosouSpider|Harvest|Havij|Heritrix|Hloader|HonoluluBot|Humanlinks|HybridBot|IDBTE4M|IDBot|IRLbot|Iblog|Id-search|IlseBot|Image\\ Fetch|Image\\ Sucker|ImagesiftBot|IndeedBot|Indy\\ Library|InfoNaviRobot|InfoTekies|Intelliseek|InterGET|InternetSeer|Internet\\ Ninja|Iria|Iskanie|IstellaBot|JOC\\ Web\\ Spider|JamesBOT|Jbrofuzz|JennyBot|JetCar|Jetty|JikeSpider|Joomla|Jorgee|JustView|Jyxobot|Kenjin\\ Spider|Keybot\\ Translation-Search-Machine|Keyword\\ Density|Kinza|Kozmosbot|LNSpiderguy|LWP::Simple|Lanshanbot|Larbin|Leap|LeechFTP|LeechGet|LexiBot|Lftp|LibWeb|Libwhisker|LieBaoFast|Lightspeedsystems|Likse|LinkScan|LinkWalker|Linkbot|LinkextractorPro|LinkpadBot|LinksManager|LinqiaMetadataDownloaderBot|LinqiaRSSBot|LinqiaScrapeBot|Lipperhey|Lipperhey\\ Spider|Litemage_walker|Lmspider|Ltx71|MFC_Tear_Sample|MIDown\\ tool|MIIxpc|MJ12bot|MQQBrowser|MSFrontPage|MSIECrawler|MTRobot|Mag-Net|Magnet|Mail\.RU_Bot|Majestic-SEO|Majestic12|Majestic\\ SEO|MarkMonitor|MarkWatch|Mass\\ Downloader|Masscan|Mata\\ Hari|MauiBot|Mb2345Browser|MeanPath\\ Bot|Meanpathbot|Mediatoolkitbot|MegaIndex\.ru|Metauri|MicroMessenger|Microsoft\\ Data\\ Access|Microsoft\\ URL\\ Control|Minefield|Mister\\ PiX|Moblie\\ Safari|Mojeek|Mojolicious|MolokaiBot|Morfeus\\ Fucking\\ Scanner|Mozlila|Mr\.4x3|Msrabot|Musobot|NICErsPRO|NPbot|Name\\ Intelligence|Nameprotect|Navroad|NearSite|Needle|Nessus|NetAnts|NetLyzer|NetMechanic|NetSpider|NetZIP|Net\\ Vampire|Netcraft|Nettrack|Netvibes|NextGenSearchBot|Nibbler|Niki-bot|Nikto|NimbleCrawler|Nimbostratus|Ninja|Nmap|Nuclei|Nutch|Octopus|Offline\\ Explorer|Offline\\ Navigator|OnCrawl|OpenLinkProfiler|OpenVAS|Openfind|Openvas|OrangeBot|OrangeSpider|OutclicksBot|OutfoxBot|PECL::HTTP|PHPCrawl|POE-Component-Client-HTTP|PageAnalyzer|PageGrabber|PageScorer|PageThing\.com|Page\\ Analyzer|Pandalytics|Panscient|Papa\\ Foto|Pavuk|PeoplePal|Petalbot|Pi-Monster|Picscout|Picsearch|PictureFinder|Piepmatz|Pimonster|Pixray|PleaseCrawl|Pockey|ProPowerBot|ProWebWalker|Probethenet|Proximic|Psbot|Pu_iN|Pump|PxBroker|PyCurl|QueryN\\ Metasearch|Quick-Crawler|RSSingBot|Rainbot|RankActive|RankActiveLinkBot|RankFlex|RankingBot|RankingBot2|Rankivabot|RankurBot|Re-re|ReGet|RealDownload|Reaper|RebelMouse|Recorder|RedesScrapy|RepoMonkey|Ripper|RocketCrawler|Rogerbot|SBIder|SEOkicks|SEOkicks-Robot|SEOlyticsCrawler|SEOprofiler|SEOstats|SISTRIX|SMTBot|SalesIntelligent|ScanAlert|Scanbot|ScoutJet|Scrapy|Screaming|ScreenerBot|ScrepyBot|Searchestate|SearchmetricsBot|Seekport|SeekportBot|SemanticJuice|Semrush|SemrushBot|SentiBot|SenutoBot|SeoSiteCheckup|SeobilityBot|Seomoz|Shodan|Siphon|SiteCheckerBotCrawler|SiteExplorer|SiteLockSpider|SiteSnagger|SiteSucker|Site\\ Sucker|Sitebeam|Siteimprove|SlySearch|SmartDownload|Snake|Snapbot|Snoopy|SocialRankIOBot|Sociscraper|Sogou\\ web\\ spider|Sosospider|Sottopop|SpaceBison|Spammen|SpankBot|Spanner|Spbot|Spinn3r|SputnikBot|Sqlmap|Sqlworm|Sqworm|Steeler|Stripper|Sucker|Sucuri|SuperBot|SuperHTTP|Surfbot|SurveyBot|Suzuran|Swiftbot|Szukacz|T0PHackTeam|T8Abot|Teleport|TeleportPro|Telesoft|Telesphoreo|Telesphorep|TheNomad|The\\ Intraformant|Thumbor|TightTwatBot|TinyTestBot|Titan|Toata|Toweyabot|Tracemyfile|Trendiction|Trendictionbot|True_Robot|Turingos|Turnitin|TurnitinBot|TwengaBot|Twice|Typhoeus|URLy\.Warning|URLy\\ Warning|UnisterBot|Upflow|V-BOT|VB\\ Project|VCI|Vacuum|Vagabondo|VelenPublicWebCrawler|VeriCiteCrawler|VidibleScraper|Virusdie|VoidEYE|Voil|Voltron|WASALive-Bot|WBSearchBot|WEBDAV|WISENutbot|WPScan|WWW-Collector-E|WWW-Mechanize|WWW::Mechanize|WWWOFFLE|Wallpapers|Wallpapers/3\.0|WallpapersHD|WeSEE|WebAuto|WebBandit|WebCollage|WebCopier|WebEnhancer|WebFetch|WebFuck|WebGo\\ IS|WebImageCollector|WebLeacher|WebPix|WebReaper|WebSauger|WebStripper|WebSucker|WebWhacker|WebZIP|Web\\ Auto|Web\\ Collage|Web\\ Enhancer|Web\\ Fetch|Web\\ Fuck|Web\\ Pix|Web\\ Sauger|Web\\ Sucker|Webalta|WebmasterWorldForumBot|Webshag|WebsiteExtractor|WebsiteQuester|Website\\ Quester|Webster|Whack|Whacker|Whatweb|Who\.is\\ Bot|Widow|WinHTTrack|WiseGuys\\ Robot|Wonderbot|Woobot|Wotbox|Wprecon|Xaldon\\ WebSpider|Xaldon_WebSpider|Xenu|YoudaoBot|Zade|Zauba|Zermelo|Zeus|Zitebot|ZmEu|ZoomBot|ZoominfoBot|ZumBot|ZyBorg|adscanner|anthropic-ai|archive\.org_bot|arquivo-web-crawler|arquivo\.pt|autoemailspider|backlink-check|cah\.io\.community|check1\.exe|clark-crawler|coccocbot|cognitiveseo|cohere-ai|com\.plumanalytics|crawl\.sogou\.com|crawler\.feedback|crawler4j|dataforseo\.com|dataforseobot|demandbase-bot|domainsproject\.org|eCatch|evc-batch|facebookscraper|gopher|heritrix|imagesift\.com|instabid|internetVista\\ monitor|ips-agent|isitwp\.com|iubenda-radar|linkdexbot|lwp-request|lwp-trivial|magpie-crawler|meanpathbot|mediawords|muhstik-scan|netEstate\\ NE\\ Crawler|oBot|omgili|openai|openai\.com|page\\ scorer|pcBrowser|plumanalytics|polaris\\ version|probe-image-size|ripz|s1z\.ru|satoristudio\.net|scalaj-http|scan\.lol|seobility|seocompany\.store|seoscanners|seostar|serpstatbot|sexsearcher|sitechecker\.pro|siteripz|sogouspider|sp_auditbot|spyfu|sysscan|tAkeOut|trendiction|trendiction\.de|ubermetrics-technologies\.com|voyagerx\.com|webgains-bot|webmeup-crawler|webpros\.com|webprosbot|x09Mozilla|x22Mozilla|xpymep1\.exe|zauba\.io|zgrab|AdsTxtCrawlerTP|AfD-Verbotsverfahren|Aipbot|Alligator|Anarchie|Attach|BackStreet|BackWeb|Badass|Blackboard|Blow|Brandprotect|BuiltWith|Crawling\\ at\\ Home\\ Project|Information\\ Security\\ Team\\ InfraSec\\ Scanner|InternetMeasurement|YaK|awario\.com|linkfluence|trendiction\.com|voyagerx\.com|ubermetrics-technologies\.com)" \
    "id:'999994',\
    phase:1,\
    deny,\
    status:403,\
    log,\
    msg:'Blocking request based on User-Agent string.'"
SecRule REQUEST_HEADERS:User-Agent "(?i)(Nikto/|Arachni/|Nmap Scripting Engine|OpenVAS|burpcollaborator\.net|Blah/2|Callstranger Vulnerability Checker|Mozilla \(libwhisker/|Typhoeus - https://github\.com/typhoeus/typhoeus|Vulners NMAP Plugin|WPScan|Wfuzz/|ZAP|gobuster|masscan/|sqlmap/)" \
    "id:'999995',\
    phase:1,\
    deny,\
    status:403,\
    log,\
    msg:'Blocking identified vulnerability scanner based on User-Agent string.'"
SecRule REQUEST_HEADERS:User-Agent "(?i)(acunetix|nessus|sqlmap|nikto|w3af|zaproxy|burp|dirbuster|openvas|metasploit|wfuzz|arachni|zap)" \
    "id:999996,\
    phase:1,\
    deny,\
    status:403,\
    log,\
    msg:'Blocking identified vulnerability scanner based on User-Agent.'"
SecRule REQUEST_HEADERS:User-Agent "(?i)(acunetix|nessus|sqlmap|nikto|w3af|zaproxy|Burp|DirBuster|OpenVAS|Metasploit|Wfuzz|Arachni|ZAP)" \
    "id:999997,\
    phase:1,\
    deny,\
    status:403,\
    log,\
    msg:'Blocking identified vulnerability scanner based on User-Agent.'"
# Block access to /.travis.yml
SecRule REQUEST_URI "@streq /.travis.yml" "id:999998,phase:1,deny,status:403,log,msg:'Access to /.travis.yml blocked.'"
# Block access to /matomo/.travis.yml
SecRule REQUEST_URI "@streq /matomo/.travis.yml" "id:999999,phase:1,deny,status:403,log,msg:'Access to /matomo/.travis.yml blocked.'"
SecRule REQUEST_URI "@unconditionalMatch" "id:1000000,phase:1,log,msg:'Logging URI: %{REQUEST_URI}'"
#Exclusion rule sample: SecRule REQUEST_URI "@rx ^/.*" "id:1000001,phase:1,pass,nolog,ctl:ruleEngine=Off"

